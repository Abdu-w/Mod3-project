{"ast":null,"code":"var _jsxFileName = \"/Users/student_ma109/Desktop/backendreact/joke-for-fun/src/components/InitialCall.js\";\nimport React, { Component } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport axios from 'axios';\nexport default class InitialCall extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      allJokes: [],\n      joke: '',\n      punchline: '',\n      on: false\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const joke = {\n        jk_id: this.state.allJokes.length + 1,\n        jk_type: 'add general',\n        jokes: this.state.joke,\n        punch_line: this.state.punchline\n      };\n      this.setState({\n        joke: '',\n        punchline: ''\n      });\n      axios.post('first_api/v1/jokes', joke);\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.editJoke = (id, punch_line) => {\n      const newJoke = prompt(\"update your joke\");\n      const newpunchline = prompt(\"add a punchline\");\n\n      if (newJoke && newpunchline) {\n        let joke = {\n          jk_id: id,\n          jk_type: 'add general',\n          jokes: newJoke,\n          punch_line: newpunchline\n        };\n        axios.put(`first_api/v1/jokes/${id}`, joke);\n      }\n    };\n\n    this.removeJoke = id => {\n      // console.log(id)\n      axios.delete(`first_api/v1/jokes/1/${id}`);\n    };\n\n    this.revealPunchline = (e, id, punch_line) => {\n      this.setState({\n        on: true,\n        punchline: punch_line\n      });\n\n      if (this.state.on) {\n        this.setState({\n          on: false,\n          punchline: ''\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    /**\n     * first check if a record exist\n     * if it does\n     *  retrieve from DB\n     *  set the state\n     * else\n     *  populate DB with all allJokes *\n     *  set the state *\n     */\n    axios.get('https://official-joke-api.appspot.com/random_ten').then(res => {\n      const allJokes = res.data.map((jokesObj, idx) => {\n        const jkContent = {\n          // create record\n          jk_id: idx,\n          jk_type: jokesObj.type,\n          jokes: jokesObj.setup,\n          punch_line: jokesObj.punchline\n        };\n        console.log(jkContent.jk_id, 'jhfjhoajnjvnajnejfnjnj');\n        const test = {\n          jk_id: 'idx',\n          jk_type: 'jokesObj.type',\n          jokes: 'jokesObj.setup',\n          punch_line: 'jokesObj.punchline'\n        };\n        axios.post('first_api/v1/jokes', test); // post to DB\n\n        return jkContent;\n      });\n      this.setState({\n        allJokes: allJokes\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Initial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, this.state.allJokes.map(item => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"joke-conatiner\",\n      key: item.jk_id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"jokes\",\n      onClick: () => this.editJoke(item.id),\n      onMouseOver: item.punch_line,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, item.jokes), /*#__PURE__*/React.createElement(\"button\", {\n      key: item.jk_id,\n      onClick: () => this.revealPunchline(item.jk_id, item.punch_line),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"punline\"), this.state.on ? this.state.punchline : null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"delete-btn\",\n      onClick: () => this.removeJoke(item.jk_id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"delete\"))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-joke\",\n      type: \"text\",\n      name: \"joke\",\n      value: this.state.joke,\n      placeholder: \"add a joke\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"punchline\",\n      value: this.state.punchline,\n      placeholder: \"add a punchline\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, \"add\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/student_ma109/Desktop/backendreact/joke-for-fun/src/components/InitialCall.js"],"names":["React","Component","v4","uuid","axios","InitialCall","state","isLoading","allJokes","joke","punchline","on","onSubmit","e","preventDefault","jk_id","length","jk_type","jokes","punch_line","setState","post","onChange","target","name","value","editJoke","id","newJoke","prompt","newpunchline","put","removeJoke","delete","revealPunchline","componentDidMount","get","then","res","data","map","jokesObj","idx","jkContent","type","setup","console","log","test","render","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport axios from 'axios';\n\n\nexport default class InitialCall extends Component {\n  state = {\n    isLoading: true,\n    allJokes: [],\n    joke: '',\n    punchline: '',\n    on:false,\n  };\n\n  async componentDidMount() {\n    /**\n     * first check if a record exist\n     * if it does\n     *  retrieve from DB\n     *  set the state\n     * else\n     *  populate DB with all allJokes *\n     *  set the state *\n     */\n    axios.get('https://official-joke-api.appspot.com/random_ten')\n      .then(res => {\n        const allJokes = res.data.map((jokesObj, idx) => {\n          const jkContent = { // create record\n            jk_id: idx,\n            jk_type: jokesObj.type,\n            jokes: jokesObj.setup,\n            punch_line: jokesObj.punchline,\n          }\n          console.log( jkContent.jk_id, 'jhfjhoajnjvnajnejfnjnj')\n          const test = {\n            jk_id: 'idx',\n            jk_type: 'jokesObj.type',\n            jokes: 'jokesObj.setup',\n            punch_line: 'jokesObj.punchline',\n\n          }\n\n          axios.post('first_api/v1/jokes', test) // post to DB\n          return jkContent\n        })\n\n        this.setState({\n          allJokes: allJokes,\n        })\n      })\n  }\n\n\n  onSubmit = (e) => {\n    e.preventDefault()\n    const joke = {\n      jk_id: this.state.allJokes.length + 1,\n      jk_type : 'add general', \n      jokes: this.state.joke,\n      punch_line: this.state.punchline,\n    }\n    this.setState({\n      joke: '',\n      punchline: ''\n    })\n    axios.post('first_api/v1/jokes', joke) \n  }\n\n  onChange = (e) => {\n    this.setState({\n      [e.target.name] : e.target.value\n    })\n  }\n\n  editJoke = (id, punch_line) => {\n    \n    const  newJoke = prompt(\"update your joke\");\n    const  newpunchline = prompt(\"add a punchline\");\n    if(newJoke && newpunchline) {\n      let  joke = {\n        jk_id: id,\n        jk_type : 'add general',\n        jokes: newJoke,\n        punch_line: newpunchline,\n      }\n\n      axios.put(`first_api/v1/jokes/${id}`,joke ) \n    }\n  }\n\n  removeJoke = (id) => {\n    // console.log(id)\n     axios.delete(`first_api/v1/jokes/1/${id}`)\n  }\n\n  revealPunchline =(e, id, punch_line) =>{\n    this.setState({\n      on:true,\n      punchline:punch_line\n    })\n    if(this.state.on){\n      this.setState({\n        on: false,\n        punchline: ''\n      })\n    }\n   \n  }\n\n\n  render() {\n    console.log(this.state)\n  \n    return (\n      <div className=\"Initial\">\n\n\n      {\n        this.state.allJokes.map(item =>\n        <div className=\"joke-conatiner\" key={item.jk_id}> \n          <p  className='jokes' \n              onClick={() => this.editJoke(item.id)} \n              onMouseOver={item.punch_line}>\n            {item.jokes} \n          </p>\n    \n            <button key={item.jk_id} \n            onClick={() => this.revealPunchline(item.jk_id, item.punch_line)}>\n            punline\n            </button>\n            {this.state.on?this.state.punchline:null}\n        \n        \n      \n          <button className='delete-btn' onClick={() => this.removeJoke(item.jk_id)}>\n            delete\n          </button>\n          {/* <button className='punchLine-btn' onMouseOver */}\n        </div>\n        )\n      }\n        <form onSubmit={this.onSubmit}>\n          <input  \n            className='input-joke'\n            type='text' \n            name='joke' \n            value={this.state.joke} \n            placeholder=\"add a joke\"\n            onChange={this.onChange}\n            />\n          <input \n            type='text' \n            name='punchline' \n            value={this.state.punchline} \n            placeholder=\"add a punchline\"\n            onChange={this.onChange}\n            />\n          <button>add</button>\n        </form>\n      \n\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}